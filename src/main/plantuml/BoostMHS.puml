@startuml

class BoostMHS {
    - HypothesisFactory factory
    - PriorityQueue<Hypothesis> current
    - List<Hypothesis> solutions
    - LinkedHashMap<BitVector, BitVector> bucket
    - boolean[][] instance
    - boolean[][] matrix
    - List<Integer> nonEmptyColumns
    - int DEPTH
    - long startTime
    - int depthLimit
    - double computationTime
    - boolean executed
    - boolean stopped
    - boolean stoppedInsideLoop
    - boolean outOfMemoryError

    + BoostMHS(boolean[][] instance)
    + List<Hypothesis> run(BitSetType type, long timeoutMillis)
    + List<Hypothesis> getSolutions()
    + boolean[][] getInstance()
    + boolean[][] getMatrix()
    + List<Integer> getNonEmptyColumns()
    + int getDEPTH()
    + double getComputationTime()
    + boolean isExecuted()
    + boolean isStopped()
    + boolean isStoppedInsideLoop()
    + boolean isOutOfMemoryError()
    + int getDepthLimit()

    - Hypothesis getInitialHypothesis(BitSetType type, int m, int n)
    - List<Hypothesis> generateChildrenEmptyHypothesis(Hypothesis parent)
    - List<Hypothesis> generateChildren(Hypothesis parent)
    - static boolean isGreater(BitVector a, BitVector b)
    - void setFields(Hypothesis hypothesis)
    - boolean check(Hypothesis hypothesis)
    - void propagate(Hypothesis predecessor, Hypothesis successor)
    - void propagate(Hypothesis successor, BitVector information)
    - void cleanMatrix()
    - void restoreSolutions()
    - void printStatusBar(int processedCount, int depth, long startTime, long timeoutNanos)
}
@enduml
